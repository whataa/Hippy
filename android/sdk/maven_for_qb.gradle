apply plugin: 'maven-publish'

//给QB专门写的打包脚本，之前的名字改成了build_old.gradle
ext {
    def propFile = file('maven-auth.properties')
    if (propFile.exists()) {
        project.file('maven-auth.properties').with {
            Properties p = new Properties()
            it.withReader('UTF-8') { p.load(it) }
            MAVEN_USER = p.get('maven_username')
            MAVEN_PWD = p.get('maven_password')
            bugly_bundle_id = p.get('bugly_bundle_id')
            bugly_appkey = p.get('bugly_appkey')
            bugly_appid = p.get('bugly_appid')
            println("=======MAVEN_USER=" + MAVEN_USER + ", MAVEN_PWD=" + MAVEN_PWD)
        }
    } else {
        MAVEN_USER = System.getenv('maven_username')
        MAVEN_PWD = System.getenv('maven_password')
        bugly_bundle_id = System.getenv('bugly_bundle_id')
        bugly_appkey = System.getenv('bugly_appkey')
        bugly_appid = System.getenv('bugly_appid')
    }
}


// 源代码一起打包(不需要打包源代码的不要添加这几行)
task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

publishing {
    publications {

        myPub(MavenPublication) {
            groupId 'com.tencent.qqbrowser.hippyforqb'
            artifactId 'hippysdk'
            version 'qb-2.14.1-3'
            artifact(androidSourcesJar)
            artifact("$buildDir/outputs/aar/android-sdk-release.aar")
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.api.allDependencies.each {
                    if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'runtime')
                    }
                }
            }
            pom {
                licenses {
                    license {
                        name = "The Apache Software License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://mirrors.tencent.com/repository/maven/qqbrowser"
            credentials {
                username MAVEN_USER
                password MAVEN_PWD
            }
//            url "file:///Users/niuniuyang/maven/hippyforqb/"
        }
    }
}

task donwloadBuglySymbolUploadTool() {
  doFirst {
    def f = new File(project.buildDir, 'tools/bugly-upload-symbol.jar')
    f.parentFile.mkdirs()
    if (!f.exists()) {
      def url = 'https://mirrors.tencent.com/repository/generic/BuglyTools/SymbolTools/1.0.50/buglyoa-upload-symbol-1.0.50.jar'
      new URL(url).withInputStream { i -> f.withOutputStream { it << i } }
    }
  }
}

task uploadSymbolToBugly(type: JavaExec) {
  dependsOn(donwloadBuglySymbolUploadTool)
  def symbol = new File(project.buildDir, 'intermediates/cmake/release/obj/')
  def tool = new File(project.buildDir, 'tools/bugly-upload-symbol.jar')
  classpath = files(tool)
  args(
    "-appid", bugly_appid,
    "-appkey", bugly_appkey,
    '-bundleid', bugly_bundle_id,
    '-platform', 'Android',
    '-inputSymbol', "${symbol.absolutePath}"
  )
  doFirst {
    if (!symbol.exists()) {
      throw new RuntimeException("not found Symbol at: ${symbol.absolutePath}")
    }
    if (!tool.exists()) {
      throw new RuntimeException("not found SymbolUploadTool at: ${tool.absolutePath}")
    }
  }
}

task cleanupAfterUpload(type: Delete) {
  dependsOn(uploadSymbolToBugly)
  delete files(new File(projectDir, 'buglybin'), new File(projectDir, 'cp_buglySymbolAndroid.jar'))
}

afterEvaluate {
  android.libraryVariants.all { variant ->
    if ('release' == variant.buildType.name) {
      project.tasks.getByName("bundleReleaseAar") { bundleTask ->
        project.tasks.getByName("publishMyPubPublicationToMavenRepository") { Task publishTask ->
          publishTask.dependsOn(bundleTask)
          publishTask.finalizedBy cleanupAfterUpload
        }
      }
    }
  }
}
